package com.tms.dsa.sorting;

import java.util.Arrays;
import java.util.Random;

public class mergeSort {

	public static void main(String[] args) {
		System.out.println("MERGE SORT IMPLEMENATION");
		int[] arr = { 52, 40, 43, 33, 45, 65, 4, 80, 11, 81, 28 };
		int sizeOfRandomArray = 20;
		int[] randomArray = generateIntegerArray(sizeOfRandomArray);
		System.out.println("GENERATED RANDOM INTEGER ARRAY : " + Arrays.toString(randomArray));
		System.out.println("SAMPLE INTEGER ARRAY : " + Arrays.toString(arr));

		merge_sort(arr, 0, arr.length - 1);
		merge_sort(randomArray, 0, sizeOfRandomArray - 1);

		System.out.println("SAMPLE INTEGER ARRAY SORTED: " + Arrays.toString(arr));
		System.out.println("GENERATED RANDOM INTEGER ARRAY SORTED: " + Arrays.toString(randomArray));

	}

	public static void merge_sort(int[] arr, int leftIndex, int rightIndex) {
		if (leftIndex < rightIndex) {
			int mid = (leftIndex + rightIndex) / 2;
			merge_sort(arr, leftIndex, mid); // sort left sub array
			merge_sort(arr, mid + 1, rightIndex); // sort right sub array

			merging_function(arr, leftIndex, mid, rightIndex);
		}
	}

	private static void merging_function(int[] arr, int leftIndex, int mid, int rightIndex) {
		// get length of two sub arrays to merge from index shared
		int n1 = mid - leftIndex + 1; // length of L[p...q]
		int n2 = rightIndex - mid; // length of L[q+1...r]

		// create & fill the sub arrays length n1 and n2 respectively
		int[] A1 = new int[n1];
		int[] A2 = new int[n2];
		int i = 0, j = 0, k = 0;
		while (i < n1) {
			A1[i] = arr[leftIndex + i];
			i++;
		}
		while (j < n2) {
			A2[j] = arr[mid + 1 + j];
			j++;
		}
		i = 0;
		j = 0;

		// merge procedure
		while (true) {
			if (A1[i] < A2[j]) {
				arr[leftIndex + k] = A1[i];

				i++;
				k++;

				if (i == n1) {
					while (j < n2) {
						arr[leftIndex + k] = A2[j];

						j++;
						k++;
					}
					break; // from while loop
				}

			} else {
				arr[leftIndex + k] = A2[j];

				j++;
				k++;

				if (j == n2) {
					while (i < n1) {
						arr[leftIndex + k] = A1[i];

						i++;
						k++;
					}
					break;
				}

			}
		}

	}

	public static int[] generateIntegerArray(int size) {
		int[] result = new int[size];
		Random r = new Random();
		for (int i = 0; i < size; i++) {
			result[i] = r.nextInt(100);
		}
		return result;

	}
}
